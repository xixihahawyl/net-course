<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta name="description" content="大家好，欢迎阅读周三算法数据结构专题，今天我们来聊聊一个新的数据结构，叫做线段树。 线段树这个数据结构很多人可能会有点蒙，觉得没有听说过，但是它非常非常有名，尤其是在竞赛圈，可以说是竞赛圈的必备技能。" />
    <meta property="og:description" content="大家好，欢迎阅读周三算法数据结构专题，今天我们来聊聊一个新的数据结构，叫做线段树。 线段树这个数据结构很多人可能会有点蒙，觉得没有听说过，但是它非常非常有名，尤其是在竞赛圈，可以说是竞赛圈的必备技能。" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title> ACMer不得不会的线段树，究竟是种怎样的数据结构？ - TechFlow2019 - 开发者的网上家园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=dktCmaTYc_s0a4EnvC6tuH5wYElIJN_131iOybZOKro" />
    <link id="MainCss" rel="stylesheet" href="/skins/simplememory/bundle-simplememory.min.css?v=uknaX_hejnSu-njQgx4Hj1R0JiPLwUhFPUlwWNmWyB4" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/techflow/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/techflow/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/techflow/wlwmanifest.xml" />
    <script>
        var currentBlogId = 569749;
        var currentBlogApp = 'techflow';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'SimpleMemory';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2020-10-05 09:54';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=quLP6V96NCUwrp9e9p4Tc3ZzspjwpbJyGVOAQHoms5M"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="top_nav" class="navbar">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a>
                </li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=oS4PkibyMjZ9rGD5XAcLt99uW_s76Javy2up4dbnZNY" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" onclick="logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signin/?returnUrl=https://www.cnblogs.com/">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/techflow/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/techflow/">TechFlow2019</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/techflow/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/TechFlow2019">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/techflow/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
255&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
93</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/techflow/p/13769396.html">
    <span> ACMer不得不会的线段树，究竟是种怎样的数据结构？</span>
    


</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="color: rgba(0, 0, 0, 1); line-height: 1.6; word-spacing: 0; letter-spacing: 0; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif; font-size: 15px; padding: 10px"><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">大家好，欢迎阅读周三<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">算法数据结构</strong>专题，今天我们来聊聊一个新的数据结构，叫做线段树。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">线段树这个数据结构很多人可能会有点蒙，觉得没有听说过，但是它非常非常有名，尤其是在竞赛圈，可以说是<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">竞赛圈的必备技能</strong>。所以如果以后遇到有人看了一点算法导论就在你面前装逼，你就可以问他：请问线段树更新的复杂度是多少？</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">不过如果你会线段树，你也要小心一点，最好不要在面试的时候随便透露你会这个算法。否则面试官一下子就会知道你是圈里人，然后你会发现你后面的面试问题比之前好像难不少。当然也有可能遇到面试官自己不会，为了防止尴尬强行让你用非线段树的解法来完成，比如我就遇到过……</p>
<h2 data-tool="mdnice编辑器" style="margin: 70px 30px 30px; padding: 12px 0; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: rgba(0, 0, 0, 1); line-height: 1.1em; border: 1px solid rgba(0, 0, 0, 1)"><span style="float: left; display: block; width: 90%; border-top: 1px solid rgba(0, 0, 0, 1); height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px"> </span><span class="prefix" style="display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: rgba(0, 0, 0, 1); box-shadow: 3px 0, 0 3px, -3px 0, 0 -3px"></span><span class="content" style="display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)))">例题</span><span class="suffix" style="display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: rgba(0, 0, 0, 1); box-shadow: 3px 0, 0 3px, -3px 0, 0 -3px"></span><span style="float: right; display: block; width: 90%; border-bottom: 1px solid rgba(0, 0, 0, 1); height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px"> </span></h2>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">说了这么多废话，那么线段树究竟是什么呢？线段树的英文是segment tree，其实也算是一个直译。因为这个数据结构和线段没有特别大的关系，我个人感觉翻译成<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">区间树</strong>可能更贴近一点。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">我们先理解到这里，就是这个数据结构大概和区间有点关系。我们先放一放，先来看一道例题，来实际体会一下，为什么需要线段树这个数据结构，以及它的使用场景究竟是什么。这样我们可以对它有一个更加直观的感受，这道题很简单也很经典，我就是在这道题遇到了面试官不让用线段树的突然袭击。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">这道题的题面是这样，给定一个长度为n的数组。这个数组当中有n个整数，然后我们会有两种操作。一种操作叫更新，我们<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">指定更新某一个位置的某个数</strong>，第二个操作叫query，给定一个区间，<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">要求这个区间里面元素的最小值</strong>。n的范围呢是<span class="span-inline-equation" style="cursor: pointer"><span><img style="margin: 10px auto 0; max-width: 100%; border-radius: 4px; display: inline" class="equation" src="https://juejin.im/equation?tex=10^5" alt=""></span></span>，操作的数量也是<span class="span-inline-equation" style="cursor: pointer"><span><img style="margin: 10px auto 0; max-width: 100%; border-radius: 4px; display: inline" class="equation" src="https://juejin.im/equation?tex=10^5" alt=""></span></span>，请问我们应该怎么实现？</p>
<h2 data-tool="mdnice编辑器" style="margin: 70px 30px 30px; padding: 12px 0; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: rgba(0, 0, 0, 1); line-height: 1.1em; border: 1px solid rgba(0, 0, 0, 1)"><span style="float: left; display: block; width: 90%; border-top: 1px solid rgba(0, 0, 0, 1); height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px"> </span><span class="prefix" style="display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: rgba(0, 0, 0, 1); box-shadow: 3px 0, 0 3px, -3px 0, 0 -3px"></span><span class="content" style="display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)))">线段树概念</span><span class="suffix" style="display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: rgba(0, 0, 0, 1); box-shadow: 3px 0, 0 3px, -3px 0, 0 -3px"></span><span style="float: right; display: block; width: 90%; border-bottom: 1px solid rgba(0, 0, 0, 1); height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px"> </span></h2>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">当然你可能已经知道要用线段树了，只是不知道线段树是什么以及怎么使用。我们先把这些疑惑放在一边，就单纯简单地用最朴素的方法来思考的话，我们会发现我们每次查询都是<span class="span-inline-equation" style="cursor: pointer"><span><img style="margin: 10px auto 0; max-width: 100%; border-radius: 4px; display: inline" class="equation" src="https://juejin.im/equation?tex=O(n)" alt=""></span></span>的操作。最坏的情况下，我们就是要求整个数组的最小值，那么我们需要依次遍历整个区间来求。那么复杂度再乘上操作的数量，整个程序的复杂度会达到<span class="span-inline-equation" style="cursor: pointer"><span><img style="margin: 10px auto 0; max-width: 100%; border-radius: 4px; display: inline" class="equation" src="https://juejin.im/equation?tex=10^{10}" alt=""></span></span>。显然这是一个非常巨大的数字，在算法竞赛场景当中一定会超时。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">也就是说简单粗暴是做不出来的，如果你有足够多的做题经验，你就会很自然地想到我们也许需要使用一些数据结构来优化这个查询的复杂度。<span class="span-inline-equation" style="cursor: pointer"><span><img style="margin: 10px auto 0; max-width: 100%; border-radius: 4px; display: inline" class="equation" src="https://juejin.im/equation?tex=O(n)" alt=""></span></span>肯定是不能接受的，即使不能优化到<span class="span-inline-equation" style="cursor: pointer"><span><img style="margin: 10px auto 0; max-width: 100%; border-radius: 4px; display: inline" class="equation" src="https://juejin.im/equation?tex=O(1)" alt=""></span></span>，也至少可以试试<span class="span-inline-equation" style="cursor: pointer"><span><img style="margin: 10px auto 0; max-width: 100%; border-radius: 4px; display: inline" class="equation" src="https://juejin.im/equation?tex=O(\log n)" alt=""></span></span>。线段树就是这样的数据结构，我们直接来看一张图，我们直接就可以搞明白线段树究竟是干嘛的，以及它的工作原理。</p>
<figure data-tool="mdnice编辑器" style="margin: 10px 0; display: flex; flex-direction: column; justify-content: center; align-items: center"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gijlhs3m50j30x00e8dj0.jpg" alt="" style="display: block; margin: 10px auto 0; max-width: 100%; border-radius: 4px"></figure>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">这张图当中的a就是我们存数据的数组，这个数组上面的就是线段树。我们从上往下看，给大家解释一下。最上面一条只有一个数字就是1，它代表的是<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">整个数组的最小值是1</strong>。也就是说最上层维护的是整个区间的最小值。然后是第二层，在第二层我们看到了两个数，分别是3和1。很明显，3表示的是左半边区间的最小值，1表示的右半边区间的最小值。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">到了第三行我们得到了4个数，同理，再下一层有8个数。很明显这是一颗二叉树，并且二叉树当中的<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">每一个节点维护了一个区间的值</strong>。它的叶子节点存储的是长度为1的区间，也就是单个元素。我们把两个兄弟节点维护的区间合并起来就得到了父节点的区间。在这道题当中，由于我们维护的是区间的最小值，所以我们可以得到这么一个式子：</p>
<pre class="custom" data-tool="mdnice编辑器" style="margin: 10px auto 0; box-shadow: 0 0 6px rgba(170, 170, 170, 0.48); max-width: 100%; border-radius: 4px"><span style="display: block; background: url(&quot;https://my-wechat.mdnice.com/point.png&quot;) 10px 10px / 40px no-repeat rgba(40, 44, 52, 1); height: 30px; width: 100%; margin-bottom: -7px; border-radius: 5px"></span><code class="hljs" style="overflow-x: auto; padding: 15px 16px 16px; color: rgba(171, 178, 191, 1); display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; background: rgba(40, 44, 52, 1); border-radius: 5px">node.min = min(node.left.min, node.right.min)
<span></span></code></pre>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">所以线段树就是<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">利用了二叉树这个层次结构</strong>对一个区间进行维护的数据结构。</p>
<h3 data-tool="mdnice编辑器" style="margin: 60px auto 10px; font-weight: bold; background-color: rgba(0, 0, 0, 1); color: rgba(255, 255, 255, 1); padding: 2px 10px; font-size: 17px"><span class="prefix" style="display: none"></span><span class="content">线段树查询</span><span class="suffix" style="display: none"></span></h3>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">我们已经了解了线段树的结构了，剩下的就只有两个问题，一个是如何更新一个是如何求解。我发先来看求解，我们要求一个区间的最小值。我们来实际看一下，假设我们想要查询下标是[2, 5]这个区间里的最小值怎么办？</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">我们对照一下上面的数组a，下标[3, 6]这个区间对应的是[7, 9, 6, 4]这四个值。我们会发现<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">不存在刚好只包含这四个值的区间</strong>，那怎么办呢？其实很简单，可以拼凑。我们可以发现我们可以把这个完整的区间转化成两个区间连接在一起的结果。比如下图这样。</p>
<figure data-tool="mdnice编辑器" style="margin: 10px 0; display: flex; flex-direction: column; justify-content: center; align-items: center"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gijmbkblltj318m0js10c.jpg" alt="" style="display: block; margin: 10px auto 0; max-width: 100%; border-radius: 4px"></figure>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">这样，我们就把原本比较[7, 9, 6, 4]四个值的一个查询行为转化成了只需要比较4和7两个值大小的比较行为了。这可以替我们节约大量的时间。这和记忆化搜索有一点点像，相当于我们制定一个模式，根据这个模式把区间里的最值存储下来。这样我们查询的时候可以利用这些值来快速求解。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">如果我们要求[2, 7]区间内的最小值，那么我们可以转而用这两个区间的值求到。</p>
<figure data-tool="mdnice编辑器" style="margin: 10px 0; display: flex; flex-direction: column; justify-content: center; align-items: center"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gijml1jfxgj31780juahm.jpg" alt="" style="display: block; margin: 10px auto 0; max-width: 100%; border-radius: 4px"></figure>
<h3 data-tool="mdnice编辑器" style="margin: 60px auto 10px; font-weight: bold; background-color: rgba(0, 0, 0, 1); color: rgba(255, 255, 255, 1); padding: 2px 10px; font-size: 17px"><span class="prefix" style="display: none"></span><span class="content">线段树更新</span><span class="suffix" style="display: none"></span></h3>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">接下来我们来看下线段树的更新，其实更新和查询的原理是一样的，同样是<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">从根节点出发一层层往下，一直到更新到叶子节点为止</strong>。假如说我们把数据当中的4更新成0，那么会达成一种怎样的效果呢？</p>
<figure data-tool="mdnice编辑器" style="margin: 10px 0; display: flex; flex-direction: column; justify-content: center; align-items: center"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gijmznvg49j318y0jsdnn.jpg" alt="" style="display: block; margin: 10px auto 0; max-width: 100%; border-radius: 4px"></figure>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">从结果上来看，我们是把发生变更的叶子节点到树根的<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">这一整个链路都更新了</strong>。当然这个更新也不是强制发生的，因为如果我们更新的值比它的原值1要大的话，也是不会更新的。</p>
<h2 data-tool="mdnice编辑器" style="margin: 70px 30px 30px; padding: 12px 0; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: rgba(0, 0, 0, 1); line-height: 1.1em; border: 1px solid rgba(0, 0, 0, 1)"><span style="float: left; display: block; width: 90%; border-top: 1px solid rgba(0, 0, 0, 1); height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px"> </span><span class="prefix" style="display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: rgba(0, 0, 0, 1); box-shadow: 3px 0, 0 3px, -3px 0, 0 -3px"></span><span class="content" style="display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)))">代码实现</span><span class="suffix" style="display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: rgba(0, 0, 0, 1); box-shadow: 3px 0, 0 3px, -3px 0, 0 -3px"></span><span style="float: right; display: block; width: 90%; border-bottom: 1px solid rgba(0, 0, 0, 1); height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px"> </span></h2>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">关于线段树的原理我们就差不多讲完了，看起来不太长，这是很正常的。因为线段树的原理其实很简单，就是用一棵二叉树来维护各个长度的区间。我们在查询的时候就是要找到可以拼成我们查询的区间的几个子区间，用这些子区间的值来求到我们要查的区间的值。在我们更新的时候，不需要更新整棵树，只需要更新某一条从根节点到叶子节点的路径就可以了。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">原理看起来不难，理解起来也不难，但是要用代码实现出来其实不太容易。因为线段树的<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">所有操作都是基于递归和回溯的</strong>，所以想要顺利、深入地理解线段树，对于递归以及回溯的掌握一定要过关。否则线段树你写起来很痛苦，写完了调试会更痛苦。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">我们会用面向对象的形式来创建一个线段树，当然也有人喜欢用数组来模拟，这也是可以的，本质上都是一样的。首先我们来创建一个节点类。这个节点类存储的值有3个，一个是它<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">维护的区间的值</strong>，在这个题目里维护的是区间最小值。一个是区间的范围， 左右边界。另外一个是左右孩子节点。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">由于我们在创建节点的时候还不知道它的左右孩子以及维护的值是什么，所以我们先赋值成None。</p>
<pre class="custom" data-tool="mdnice编辑器" style="margin: 10px auto 0; box-shadow: 0 0 6px rgba(170, 170, 170, 0.48); max-width: 100%; border-radius: 4px"><span style="display: block; background: url(&quot;https://my-wechat.mdnice.com/point.png&quot;) 10px 10px / 40px no-repeat rgba(40, 44, 52, 1); height: 30px; width: 100%; margin-bottom: -7px; border-radius: 5px"></span><code class="hljs" style="overflow-x: auto; padding: 15px 16px 16px; color: rgba(171, 178, 191, 1); display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; background: rgba(40, 44, 52, 1); border-radius: 5px"><span class="hljs-class" style="line-height: 26px"><span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">class</span> <span class="hljs-title" style="color: rgba(230, 192, 123, 1); line-height: 26px">Node</span>:</span>
<span>    <span class="hljs-function" style="line-height: 26px"><span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">def</span> <span class="hljs-title" style="color: rgba(97, 174, 238, 1); line-height: 26px">__init__</span><span class="hljs-params" style="line-height: 26px">(self, left_side, right_side)</span>:</span>
<span>        self.val = <span class="hljs-literal" style="color: rgba(86, 182, 194, 1); line-height: 26px">None</span>
<span>        self.ls, self.rs = left_side, right_side
<span>        self.left_child, self.right_child = <span class="hljs-literal" style="color: rgba(86, 182, 194, 1); line-height: 26px">None</span>, <span class="hljs-literal" style="color: rgba(86, 182, 194, 1); line-height: 26px">None</span>
<span></span></span></span></span></span></code></pre>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">Node类有了之后，我们就可以利用它来建树了。我们首先来看看建树的方法，也就是常说的build方法。我们创建线段树的时候最重要的就是让它当中的每一个节点能够存储对应区间的最小值。但是呢由于线段树是有层次结构的，我们在创建区间[a, b]的时候，其实可以利用区间[a, m]和区间[m+1, b]两个区间的最小值来获取整个区间的最小值。也就是说我们可以利用当前节点的左右孩子节点完成，我们之前已经说过这点了。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">我们来看代码，通过递归可以很方便地完成这一点。</p>
<pre class="custom" data-tool="mdnice编辑器" style="margin: 10px auto 0; box-shadow: 0 0 6px rgba(170, 170, 170, 0.48); max-width: 100%; border-radius: 4px"><span style="display: block; background: url(&quot;https://my-wechat.mdnice.com/point.png&quot;) 10px 10px / 40px no-repeat rgba(40, 44, 52, 1); height: 30px; width: 100%; margin-bottom: -7px; border-radius: 5px"></span><code class="hljs" style="overflow-x: auto; padding: 15px 16px 16px; color: rgba(171, 178, 191, 1); display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; background: rgba(40, 44, 52, 1); border-radius: 5px"><span class="hljs-class" style="line-height: 26px"><span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">class</span> <span class="hljs-title" style="color: rgba(230, 192, 123, 1); line-height: 26px">SegmentTree</span>:</span>
<span>    <span class="hljs-function" style="line-height: 26px"><span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">def</span> <span class="hljs-title" style="color: rgba(97, 174, 238, 1); line-height: 26px">__init__</span><span class="hljs-params" style="line-height: 26px">(self, arr)</span>:</span>
<span>        self.n = len(arr)
<span>        self.vals = arr[:]
<span>        self.root = self.build(<span class="hljs-number" style="color: rgba(209, 154, 102, 1); line-height: 26px">0</span>, self.n)
<span>
<span>    <span class="hljs-function" style="line-height: 26px"><span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">def</span> <span class="hljs-title" style="color: rgba(97, 174, 238, 1); line-height: 26px">build</span><span class="hljs-params" style="line-height: 26px">(self, l, r)</span>:</span>
<span>        <span class="hljs-comment" style="color: rgba(92, 99, 112, 1); font-style: italic; line-height: 26px"># 传入的l和r表示区间范围，左闭右开</span>
<span>        <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">if</span> r - l &lt; <span class="hljs-number" style="color: rgba(209, 154, 102, 1); line-height: 26px">1</span>:
<span>            <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">return</span> <span class="hljs-literal" style="color: rgba(86, 182, 194, 1); line-height: 26px">None</span>
<span>        node = Node(l, r)
<span>        <span class="hljs-comment" style="color: rgba(92, 99, 112, 1); font-style: italic; line-height: 26px"># 如果区间长度是1，说明是叶子节点了，直接将val赋值成对应的数值</span>
<span>        <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">if</span> r - l == <span class="hljs-number" style="color: rgba(209, 154, 102, 1); line-height: 26px">1</span>:
<span>            node.val = self.vals[l]
<span>        <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">else</span>:
<span>            <span class="hljs-comment" style="color: rgba(92, 99, 112, 1); font-style: italic; line-height: 26px"># 否则递归调用</span>
<span>            m = (l + r) &gt;&gt; <span class="hljs-number" style="color: rgba(209, 154, 102, 1); line-height: 26px">1</span>
<span>            node.left_child = self.build(l, m)
<span>            node.right_child = self.build(m, r)
<span>            node.val = min(node.left_child.val, node.right_child.val)
<span>        <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">return</span> node
<span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">当然这个过程也可以用循环实现，只不过用递归实现更加简单。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">如果你能看得到build方法，那么update和query对你来说也都不是问题，其实原理都是一样的，只不过一个是通过递归的形式去更新一个是递归去查询而已。我们先来看update：</p>
<pre class="custom" data-tool="mdnice编辑器" style="margin: 10px auto 0; box-shadow: 0 0 6px rgba(170, 170, 170, 0.48); max-width: 100%; border-radius: 4px"><span style="display: block; background: url(&quot;https://my-wechat.mdnice.com/point.png&quot;) 10px 10px / 40px no-repeat rgba(40, 44, 52, 1); height: 30px; width: 100%; margin-bottom: -7px; border-radius: 5px"></span><code class="hljs" style="overflow-x: auto; padding: 15px 16px 16px; color: rgba(171, 178, 191, 1); display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; background: rgba(40, 44, 52, 1); border-radius: 5px">    <span class="hljs-function" style="line-height: 26px"><span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">def</span> <span class="hljs-title" style="color: rgba(97, 174, 238, 1); line-height: 26px">update</span><span class="hljs-params" style="line-height: 26px">(self, k, v)</span>:</span>
<span>        self._update(self.root, k, v)
<span>
<span>    <span class="hljs-function" style="line-height: 26px"><span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">def</span> <span class="hljs-title" style="color: rgba(97, 174, 238, 1); line-height: 26px">_update</span><span class="hljs-params" style="line-height: 26px">(self, u, k, v)</span>:</span>
<span>        <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">if</span> u <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">is</span> <span class="hljs-literal" style="color: rgba(86, 182, 194, 1); line-height: 26px">None</span>:
<span>            <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">return</span>
<span>        <span class="hljs-comment" style="color: rgba(92, 99, 112, 1); font-style: italic; line-height: 26px"># 如果k在u这个节点维护的区间里</span>
<span>        <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">if</span> u.ls &lt;= k &lt; u.rs:
<span>            <span class="hljs-comment" style="color: rgba(92, 99, 112, 1); font-style: italic; line-height: 26px"># 更新它的最小值</span>
<span>            u.val = min(u.val, v)
<span>            m = (u.ls + u.rs) &gt;&gt; <span class="hljs-number" style="color: rgba(209, 154, 102, 1); line-height: 26px">1</span>
<span>            <span class="hljs-comment" style="color: rgba(92, 99, 112, 1); font-style: italic; line-height: 26px"># 判断往左还是往右</span>
<span>            <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">if</span> k &lt; m:
<span>                self._update(u.left_child, k, v)
<span>            <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">else</span>:
<span>                self._update(u.right_child, k, v)
<span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">最后我们再来看query，query同样是通过递归执行的。由于我们查询的是一个区间，所以我们需要判断我们查询区间和节点维护区间之间的关系。只要抓住了这一点，整个逻辑也是很简单的。</p>
<pre class="custom" data-tool="mdnice编辑器" style="margin: 10px auto 0; box-shadow: 0 0 6px rgba(170, 170, 170, 0.48); max-width: 100%; border-radius: 4px"><span style="display: block; background: url(&quot;https://my-wechat.mdnice.com/point.png&quot;) 10px 10px / 40px no-repeat rgba(40, 44, 52, 1); height: 30px; width: 100%; margin-bottom: -7px; border-radius: 5px"></span><code class="hljs" style="overflow-x: auto; padding: 15px 16px 16px; color: rgba(171, 178, 191, 1); display: block; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; background: rgba(40, 44, 52, 1); border-radius: 5px">    <span class="hljs-function" style="line-height: 26px"><span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">def</span> <span class="hljs-title" style="color: rgba(97, 174, 238, 1); line-height: 26px">query</span><span class="hljs-params" style="line-height: 26px">(self, l, r)</span>:</span>
<span>        <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">return</span> self._query(self.root, l, r)
<span>
<span>    <span class="hljs-function" style="line-height: 26px"><span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">def</span> <span class="hljs-title" style="color: rgba(97, 174, 238, 1); line-height: 26px">_query</span><span class="hljs-params" style="line-height: 26px">(self, u, l, r)</span>:</span>
<span>        <span class="hljs-comment" style="color: rgba(92, 99, 112, 1); font-style: italic; line-height: 26px"># l和r是查询区间</span>
<span>        <span class="hljs-comment" style="color: rgba(92, 99, 112, 1); font-style: italic; line-height: 26px"># 如果查询区间是u节点区间的超集</span>
<span>        <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">if</span> l &lt;= u.ls <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">and</span> r &gt;= u.rs:
<span>            <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">return</span> u.val
<span>        <span class="hljs-comment" style="color: rgba(92, 99, 112, 1); font-style: italic; line-height: 26px"># 如果查询区间只和u节点区间的左半部分有交集</span>
<span>        <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">elif</span> r &lt;= u.left_child.rs:
<span>            <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">return</span> self._query(u.left_child, l, r)
<span>        <span class="hljs-comment" style="color: rgba(92, 99, 112, 1); font-style: italic; line-height: 26px"># 如果查询区间只和u节点右半部分有交集</span>
<span>        <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">elif</span> l &gt;= u.right_child.ls:
<span>            <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">return</span> self._query(u.right_child, l, r)
<span>        <span class="hljs-comment" style="color: rgba(92, 99, 112, 1); font-style: italic; line-height: 26px"># 如果都有交集</span>
<span>        <span class="hljs-keyword" style="color: rgba(198, 120, 221, 1); line-height: 26px">return</span> min(self._query(u.left_child, l, r), self._query(u.right_child, l, r))
<span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<h2 data-tool="mdnice编辑器" style="margin: 70px 30px 30px; padding: 12px 0; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: rgba(0, 0, 0, 1); line-height: 1.1em; border: 1px solid rgba(0, 0, 0, 1)"><span style="float: left; display: block; width: 90%; border-top: 1px solid rgba(0, 0, 0, 1); height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px"> </span><span class="prefix" style="display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: rgba(0, 0, 0, 1); box-shadow: 3px 0, 0 3px, -3px 0, 0 -3px"></span><span class="content" style="display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)))">最后</span><span class="suffix" style="display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: rgba(0, 0, 0, 1); box-shadow: 3px 0, 0 3px, -3px 0, 0 -3px"></span><span style="float: right; display: block; width: 90%; border-bottom: 1px solid rgba(0, 0, 0, 1); height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px"> </span></h2>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">到这里，我们关于线段树的基本介绍就算是结束了。注意我说的是基本介绍，因为<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">线段树有很多种用法</strong>，今天介绍的只是其中最简单的一种：单点更新区间查询。除此之外还有<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">区间更新单点查询，区间更新区间查询，扫描线</strong>等等相对高端一些的用法。由于篇幅所限不能一次讲完，准备放在之后的文章当中分享给大家。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">另外一点市面上线段树的题目基本上都是用C++写的，所以如果你想要找一道题试一下的话，可能需要用C++重新写一遍。不过我相信这对于你们来说并不是什么大问题。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">今天的文章到这里就结束了，如果喜欢本文的话，请给我一波<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">三连</strong>支持吧（<strong style="font-weight: bold; color: rgba(0, 0, 0, 1)">关注、转发、点赞</strong>）。</p>
<p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px"><a href="https://mp.weixin.qq.com/s?__biz=MzUyMTM5OTM2NA==&amp;mid=2247487487&amp;idx=1&amp;sn=fbb859ae3d612fc44559b9b54b740d1b&amp;chksm=f9daf2d4cead7bc2b1e7e9badc54edd1a109568369a84ee291eb72483604291155080f88f890&amp;token=1031641807&amp;lang=zh_CN#rd" style="text-decoration: none; color: rgba(30, 107, 184, 1); word-wrap: break-word; font-weight: bold; border-bottom: 1px solid rgba(30, 107, 184, 1)">原文链接，求个关注</a></p>
<p id="nice-suffix-juejin-container" class="nice-suffix-juejin-container" data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin-top: 20px !important; margin-right: 0; margin-bottom: 0; margin-left: 0; line-height: 26px; color: rgba(0, 0, 0, 1); font-size: 15px">本文使用 <a href="https://mdnice.com/?from=juejin" style="text-decoration: none; color: rgba(30, 107, 184, 1); word-wrap: break-word; font-weight: bold; border-bottom: 1px solid rgba(30, 107, 184, 1)">mdnice</a> 排版</p><span style="font-size: 15px; display: block; text-align: center; margin-top: 50px; color: rgba(153, 153, 153, 1); border-bottom: 1px solid rgba(238, 238, 238, 1)">- END -</span></section>
<p>{{uploading-image-370795.png(uploading...)}}</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-10-05 09:54</span>&nbsp;
<a href="https://www.cnblogs.com/techflow/">TechFlow2019</a>&nbsp;
阅读(<span id="post_view_count">20</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13769396" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(13769396);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 569749, cb_blogApp = 'techflow', cb_blogUserGuid = '9eb32f80-09d7-4c19-e763-08d7804a3aa0';
    var cb_entryId = 13769396, cb_entryCreatedDate = '2020-10-05 09:54', cb_postType = 1;
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 TechFlow2019
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        

    </div>
</body>
</html>
